name: Automated PR Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  # Phase 7: Final PR Review
  code-review:
    name: Code Review Agent
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run morpheus-validator
        id: validator
        run: |
          echo "Running code validation..."
          npm run review:validate 2>&1 | tee validation-report.txt
          VALIDATION_EXIT_CODE=${PIPESTATUS[0]}
          echo "validation_exit_code=$VALIDATION_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Type check
        id: type_check
        run: |
          echo "Running TypeScript type checking..."
          npm run type-check 2>&1 | tee type-check-report.txt
          TYPE_CHECK_EXIT_CODE=${PIPESTATUS[0]}
          echo "type_check_exit_code=$TYPE_CHECK_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Lint
        id: lint
        run: |
          echo "Running ESLint..."
          npm run lint 2>&1 | tee lint-report.txt
          LINT_EXIT_CODE=${PIPESTATUS[0]}
          echo "lint_exit_code=$LINT_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run unit tests
        id: unit_tests
        run: |
          echo "Running unit tests..."
          npm run test:unit 2>&1 | tee unit-test-report.txt
          UNIT_TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "unit_test_exit_code=$UNIT_TEST_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Check test coverage
        id: coverage
        run: |
          echo "Checking test coverage..."
          npm run test:coverage 2>&1 | tee coverage-report.txt
          COVERAGE_EXIT_CODE=${PIPESTATUS[0]}
          echo "coverage_exit_code=$COVERAGE_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate PR review report
        id: generate_report
        run: |
          echo "Generating comprehensive PR review report..."
          npm run review:pr 2>&1 | tee pr-review-report.txt
          PR_REVIEW_EXIT_CODE=${PIPESTATUS[0]}
          echo "pr_review_exit_code=$PR_REVIEW_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Create review summary
        id: summary
        run: |
          cat > review-summary.md << 'EOF'
          ## 🤖 Automated Code Review Report

          ### Phase 7: Final PR Review - Code Review Agent

          **PR**: #${{ github.event.pull_request.number }}
          **Branch**: `${{ github.event.pull_request.head.ref }}` → `${{ github.event.pull_request.base.ref }}`
          **Author**: @${{ github.event.pull_request.user.login }}
          **Commit**: ${{ github.event.pull_request.head.sha }}

          ---

          ### 📊 Review Results

          | Check | Status | Exit Code |
          |-------|--------|-----------|
          | Code Validation (morpheus-validator) | ${{ steps.validator.outputs.validation_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.validator.outputs.validation_exit_code }} |
          | Type Check | ${{ steps.type_check.outputs.type_check_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.type_check.outputs.type_check_exit_code }} |
          | Lint | ${{ steps.lint.outputs.lint_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.lint.outputs.lint_exit_code }} |
          | Unit Tests | ${{ steps.unit_tests.outputs.unit_test_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.unit_tests.outputs.unit_test_exit_code }} |
          | Test Coverage (≥75%) | ${{ steps.coverage.outputs.coverage_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.coverage.outputs.coverage_exit_code }} |
          | PR Review Report | ${{ steps.generate_report.outputs.pr_review_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.generate_report.outputs.pr_review_exit_code }} |

          ---

          ### 📋 Code Review Checklist

          #### 1. Code Quality
          - [ ] Code follows project style guidelines
          - [ ] No console.log statements in production code
          - [ ] No `any` types used
          - [ ] Proper error handling with try/catch
          - [ ] Meaningful variable and function names
          - [ ] No code duplication

          #### 2. Testing
          - [ ] Unit tests added for new features
          - [ ] Integration tests added where appropriate
          - [ ] Edge cases covered
          - [ ] Test coverage ≥75%
          - [ ] All tests passing

          #### 3. Documentation
          - [ ] JSDoc comments on exported functions
          - [ ] README updated if necessary
          - [ ] CHANGELOG updated
          - [ ] Inline comments for complex logic

          #### 4. Security
          - [ ] No secrets or API keys committed
          - [ ] Input validation on user data
          - [ ] SQL injection prevention
          - [ ] XSS prevention
          - [ ] Authentication/authorization checked

          #### 5. Architecture
          - [ ] Follows project structure
          - [ ] Agents extend BaseAgent
          - [ ] MCP servers use @modelcontextprotocol/sdk
          - [ ] Proper separation of concerns
          - [ ] API routes have error handling

          #### 6. Performance
          - [ ] No unnecessary re-renders
          - [ ] Efficient database queries
          - [ ] Appropriate use of caching
          - [ ] No memory leaks

          ---

          ### 📄 Detailed Reports

          <details>
          <summary>🔍 Code Validation Report (morpheus-validator)</summary>

          \`\`\`
          $(cat validation-report.txt 2>/dev/null || echo "No validation report generated")
          \`\`\`

          </details>

          <details>
          <summary>🔧 Type Check Report</summary>

          \`\`\`
          $(cat type-check-report.txt 2>/dev/null || echo "No type check report generated")
          \`\`\`

          </details>

          <details>
          <summary>🎨 Lint Report</summary>

          \`\`\`
          $(cat lint-report.txt 2>/dev/null || echo "No lint report generated")
          \`\`\`

          </details>

          <details>
          <summary>🧪 Unit Test Report</summary>

          \`\`\`
          $(cat unit-test-report.txt 2>/dev/null || echo "No unit test report generated")
          \`\`\`

          </details>

          <details>
          <summary>📊 Test Coverage Report</summary>

          \`\`\`
          $(cat coverage-report.txt 2>/dev/null || echo "No coverage report generated")
          \`\`\`

          </details>

          <details>
          <summary>📝 PR Review Report (code-review-coordinator)</summary>

          \`\`\`
          $(cat pr-review-report.txt 2>/dev/null || echo "No PR review report generated")
          \`\`\`

          </details>

          ---

          ### 🎯 Overall Assessment

          **Status**: ${{ steps.validator.outputs.validation_exit_code == '0' && steps.type_check.outputs.type_check_exit_code == '0' && steps.lint.outputs.lint_exit_code == '0' && steps.unit_tests.outputs.unit_test_exit_code == '0' && steps.coverage.outputs.coverage_exit_code == '0' && '✅ **APPROVED** - All checks passed' || '⚠️ **NEEDS WORK** - Some checks failed' }}

          ${{ steps.validator.outputs.validation_exit_code == '0' && steps.type_check.outputs.type_check_exit_code == '0' && steps.lint.outputs.lint_exit_code == '0' && steps.unit_tests.outputs.unit_test_exit_code == '0' && steps.coverage.outputs.coverage_exit_code == '0' && 'This PR meets all quality standards and is ready for human review and merge.' || 'Please review the failed checks above and address the issues before merging.' }}

          ---

          ### 📚 Resources

          - [Git Workflow Documentation](./.claude/commands/git-branch-tree-pr-code-review-workflow.md)
          - [Agent Creation Guidelines](./docs/AGENTS.md)
          - [System Architecture](./docs/SYSTEM_ARCHITECTURE.md)

          ---

          *Generated by Code Review Agent - Phase 7: Final PR Review*
          *Workflow: git-branch-tree-pr-code-review-workflow.md*
          EOF

          cat review-summary.md

      - name: Post review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reviewSummary = fs.readFileSync('review-summary.md', 'utf8');

            // Post comment on PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewSummary
            });

            // Determine overall status
            const allPassed =
              ${{ steps.validator.outputs.validation_exit_code == '0' }} &&
              ${{ steps.type_check.outputs.type_check_exit_code == '0' }} &&
              ${{ steps.lint.outputs.lint_exit_code == '0' }} &&
              ${{ steps.unit_tests.outputs.unit_test_exit_code == '0' }} &&
              ${{ steps.coverage.outputs.coverage_exit_code == '0' }};

            // Add labels based on review status
            if (allPassed) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['✅ code-review-passed', 'ready-for-merge']
              });
            } else {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['⚠️ code-review-failed', 'needs-work']
              });
            }

      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-review-reports
          path: |
            validation-report.txt
            type-check-report.txt
            lint-report.txt
            unit-test-report.txt
            coverage-report.txt
            pr-review-report.txt
            review-summary.md
          retention-days: 30

      - name: Set job status
        run: |
          if [[ "${{ steps.validator.outputs.validation_exit_code }}" == "0" ]] && \
             [[ "${{ steps.type_check.outputs.type_check_exit_code }}" == "0" ]] && \
             [[ "${{ steps.lint.outputs.lint_exit_code }}" == "0" ]] && \
             [[ "${{ steps.unit_tests.outputs.unit_test_exit_code }}" == "0" ]] && \
             [[ "${{ steps.coverage.outputs.coverage_exit_code }}" == "0" ]]; then
            echo "✅ All code review checks passed"
            exit 0
          else
            echo "❌ Some code review checks failed"
            exit 1
          fi

  # Security review
  security-review:
    name: Security Review Agent
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: npm_audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate 2>&1 | tee npm-audit-report.txt
          NPM_AUDIT_EXIT_CODE=${PIPESTATUS[0]}
          echo "npm_audit_exit_code=$NPM_AUDIT_EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Scan for secrets
        id: secret_scan
        run: |
          echo "Scanning for secrets..."
          # Check for common secret patterns
          SECRETS_FOUND=0

          # API keys
          if git diff --cached | grep -iE "(api[_-]?key|apikey|api[_-]?secret)" | grep -vE "^\-|^@@|process\.env\.|NEXT_PUBLIC_"; then
            echo "⚠️ Potential API keys found"
            SECRETS_FOUND=1
          fi

          # Private keys
          if git diff --cached | grep -E "BEGIN (RSA|DSA|EC|OPENSSH) PRIVATE KEY"; then
            echo "⚠️ Private keys found"
            SECRETS_FOUND=1
          fi

          # Tokens
          if git diff --cached | grep -iE "(auth[_-]?token|access[_-]?token)" | grep -vE "^\-|^@@|process\.env\."; then
            echo "⚠️ Potential tokens found"
            SECRETS_FOUND=1
          fi

          echo "secret_scan_exit_code=$SECRETS_FOUND" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Post security review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const npmAudit = fs.readFileSync('npm-audit-report.txt', 'utf8');

            const securitySummary = `
            ## 🔒 Security Review Report

            **PR**: #${context.issue.number}

            ### Security Checks

            | Check | Status |
            |-------|--------|
            | NPM Audit | ${{ steps.npm_audit.outputs.npm_audit_exit_code == '0' && '✅ PASS' || '❌ FAIL' }} |
            | Secret Scan | ${{ steps.secret_scan.outputs.secret_scan_exit_code == '0' && '✅ PASS' || '⚠️ POTENTIAL ISSUES' }} |

            <details>
            <summary>📄 NPM Audit Report</summary>

            \`\`\`
            ${npmAudit}
            \`\`\`

            </details>

            ---

            *Generated by Security Review Agent*
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: securitySummary
            });

  # Architecture review
  architecture-review:
    name: Architecture Review Agent
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check architecture compliance
        id: architecture_check
        run: |
          echo "Checking architecture compliance..."

          VIOLATIONS=0

          # Check agents extend BaseAgent
          echo "Checking agents extend BaseAgent..."
          for file in $(find agents/implementations -name "*.ts" 2>/dev/null); do
            if grep -q "class.*Agent" "$file"; then
              if ! grep -q "extends BaseAgent" "$file"; then
                echo "⚠️ $file: Agent class does not extend BaseAgent"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
            fi
          done

          # Check MCP servers use SDK
          echo "Checking MCP servers use @modelcontextprotocol/sdk..."
          for file in $(find mcp-servers -name "*.ts" 2>/dev/null); do
            if grep -q "createServer" "$file"; then
              if ! grep -q "@modelcontextprotocol/sdk" "$file"; then
                echo "⚠️ $file: MCP server does not use @modelcontextprotocol/sdk"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
            fi
          done

          # Check API routes have error handling
          echo "Checking API routes have error handling..."
          for file in $(find app/api -name "route.ts" 2>/dev/null); do
            if ! grep -q "try\|catch" "$file"; then
              echo "⚠️ $file: API route missing try/catch error handling"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          done

          echo "architecture_violations=$VIOLATIONS" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Post architecture review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const violations = ${{ steps.architecture_check.outputs.architecture_violations }};

            const architectureSummary = `
            ## 🏗️ Architecture Review Report

            **PR**: #${context.issue.number}

            ### Architecture Compliance

            | Check | Status |
            |-------|--------|
            | Architecture Violations | ${violations === 0 ? '✅ PASS' : `⚠️ ${violations} VIOLATIONS`} |

            ${violations > 0 ? '⚠️ Please review the workflow logs for details on architecture violations.' : '✅ All architecture checks passed.'}

            ---

            *Generated by Architecture Review Agent*
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: architectureSummary
            });
